(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const s=a(377),r=a(613),{lightningChart:n,AxisScrollStrategies:o,emptyFill:i,Themes:l}=s,{createProgressiveFunctionGenerator:c}=r,p=2*Math.PI*10,m=n({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Dashboard({theme:l[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,numberOfRows:1,numberOfColumns:2}),S=m.createChartXY({columnIndex:0,rowIndex:0,columnSpan:1,rowSpan:1,legend:{visible:!1}}),d=m.createChartXY({columnIndex:1,rowIndex:0,columnSpan:1,rowSpan:1,legend:{visible:!1}});S.setTitle("Vertical regressive"),S.getDefaultAxisY().setInterval({start:p,end:0,stopAxisAfter:!1}).setScrollStrategy(o.regressive);const h=S.addLineSeries({schema:{x:{pattern:null},y:{pattern:"regressive"}}}).setMaxSampleCount(1e4);d.setTitle("Vertical progressive");const u=d.addAxisY({opposite:!0}).setDefaultInterval(e=>({end:e.dataMax,start:(e.dataMax??0)-p,stopAxisAfter:!1})).setScrollStrategy(o.scrolling),g=d.addLineSeries({schema:{x:{pattern:null},y:{pattern:"progressive"}},axisY:u}).setMaxSampleCount(1e4);d.getDefaultAxisY().dispose(),c().setSamplingFunction(Math.sin).setEnd(2*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach(e=>{h.appendSample({x:e.y,y:-e.x})}),c().setSamplingFunction(e=>Math.sin(.5*e)+Math.sin(e)+Math.cos(1.5*e)+Math.cos(.25*e)).setEnd(100*Math.PI).setStep(.015).generate().setStreamBatchSize(20).setStreamInterval(20).setStreamRepeat(!0).toStream().forEach(e=>{g.appendSample({x:e.y,y:e.x})})},216:()=>{}},e=>{e.O(0,[502],()=>e(e.s=44)),e.O()}]);